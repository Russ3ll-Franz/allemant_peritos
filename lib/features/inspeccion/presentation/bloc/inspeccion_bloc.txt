import 'package:allemant_peritos/core/error/exceptions.dart';
import 'package:allemant_peritos/core/error/failures.dart';
import 'package:allemant_peritos/features/inspeccion/data/model/inspeccion/inspeccion.dart';
import 'package:allemant_peritos/features/inspeccion/data/repositories/inspeccion_repository.dart';
import 'package:allemant_peritos/features/inspeccion/domain/repository/i_inspeccion_repository.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';

part 'inspeccion_event.dart';
part 'inspeccion_statebloc.dart';
part 'inspeccion_bloc.freezed.dart';

@injectable
class InspeccionBloc extends Cubit<InspeccionState> {
  InspeccionBloc({required this.inspeccionRepository})
      : super(const InspeccionState.inspeccionLoaded());

  IInspeccionRepository inspeccionRepository;

  Future<List<Inspeccion>> getTypeInspeccionByUser(
      String tipoInspeccion) async {
    const storage = FlutterSecureStorage();
    String userID = await storage.read(key: 'id') ?? '';
    final either = await inspeccionRepository.getTypeInspeccionByUser(
        userID: userID, tipoInspeccion: tipoInspeccion);

    return either.fold(
      (l) => throw _getFailureAndThrowExpection(l),
      (r) => r,
    );
  }
/*   Future<List<Inspeccion>> getTypeInspeccionByUser(
      String userID, String tipoInspeccion) async {
    final either = await inspeccionRepository.getTypeInspeccionByUser(
        userID: userID, tipoInspeccion: tipoInspeccion);
    return either.fold(
      (l) => throw _getFailureAndThrowExpection(l),
      (r) => r,
    );
  } */

  Exception _getFailureAndThrowExpection(Failure l) {
    if (l is ServerFailure) {
      return ServerException();
    } else if (l is CacheFailure) {
      return CacheException();
    } else {
      return UnknownException();
    }
  }

  /* Future<void> _onFetchInspeccion(
    _Fetchet event,
    Emitter<InspeccionState> emit,
  ) async {
    emit(state.when(
        inspeccionLoaded: (inspeccionLoaded) =>
            InspeccionState.inspeccionLoaded(
                [...inspeccionLoaded, event.listInspeccion]),
        inspeccionLoading: () =>
            InspeccionState.inspeccionLoaded([event.listInspeccion])));
  } */
}
